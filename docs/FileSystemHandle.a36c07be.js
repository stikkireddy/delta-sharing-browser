var s=Object.defineProperty;var a=(i,e,r)=>e in i?s(i,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):i[e]=r;var n=(i,e,r)=>(a(i,typeof e!="symbol"?e+"":e,r),r);const t=Symbol("adapter");var u;class d{constructor(e){n(this,u);n(this,"name");n(this,"kind");this.kind=e.kind,this.name=e.name,this[t]=e}async queryPermission({mode:e="read"}={}){const r=this[t];if(r.queryPermission)return r.queryPermission({mode:e});if(e==="read")return"granted";if(e==="readwrite")return r.writable?"granted":"denied";throw new TypeError(`Mode ${e} must be 'read' or 'readwrite'`)}async requestPermission({mode:e="read"}={}){const r=this[t];if(r.requestPermission)return r.requestPermission({mode:e});if(e==="read")return"granted";if(e==="readwrite")return r.writable?"granted":"denied";throw new TypeError(`Mode ${e} must be 'read' or 'readwrite'`)}async remove(e={}){await this[t].remove(e)}async isSameEntry(e){return this===e?!0:!e||typeof e!="object"||this.kind!==e.kind||!e[t]?!1:this[t].isSameEntry(e[t])}}u=t;Object.defineProperty(d.prototype,Symbol.toStringTag,{value:"FileSystemHandle",writable:!1,enumerable:!1,configurable:!0});export{d as F};
