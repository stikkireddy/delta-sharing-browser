import{e as y}from"./util.10c81017.js";const{INVALID:m,GONE:w,MISMATCH:b,MOD_ERR:z,SYNTAX:p}=y;class x{constructor(e,t,i,r){this.db=e,this.id=t,this.size=i,this.position=0,this.file=r}write(e){if(typeof e=="object"){if(e.type==="write"){if(Number.isInteger(e.position)&&e.position>=0&&(this.size<e.position&&(this.file=new File([this.file,new ArrayBuffer(e.position-this.size)],this.file.name,this.file)),this.position=e.position),!("data"in e))throw new DOMException(...p("write requires a data argument"));e=e.data}else if(e.type==="seek")if(Number.isInteger(e.position)&&e.position>=0){if(this.size<e.position)throw new DOMException(...m);this.position=e.position;return}else throw new DOMException(...p("seek requires a position argument"));else if(e.type==="truncate")if(Number.isInteger(e.size)&&e.size>=0){let n=this.file;n=e.size<this.size?new File([n.slice(0,e.size)],n.name,n):new File([n,new Uint8Array(e.size-this.size)],n.name,n),this.size=n.size,this.position>n.size&&(this.position=n.size),this.file=n;return}else throw new DOMException(...p("truncate requires a size argument"))}e=new Blob([e]);let t=this.file;const i=t.slice(0,this.position),r=t.slice(this.position+e.size);let s=this.position-i.size;s<0&&(s=0),t=new File([i,new Uint8Array(s),e,r],t.name),this.size=t.size,this.position+=e.size,this.file=t}close(){return new Promise((e,t)=>{const[i,r]=h(this.db);r.get(this.id).onsuccess=s=>{s.target.result?r.put(this.file,this.id):t(new DOMException(...w))},i.oncomplete=()=>e(),i.onerror=t,i.onabort=t})}}class u{constructor(e,t,i){this._db=e,this._id=t,this.name=i,this.kind="file",this.readable=!0,this.writable=!0}async isSameEntry(e){return this._id===e._id}async getFile(){const e=await new Promise((t,i)=>{const r=h(this._db)[1].get(this._id);r.onsuccess=s=>t(s.target.result),r.onerror=s=>i(s.target.error)});if(!e)throw new DOMException(...w);return e}async createWritable(e){let t=await this.getFile();return t=e.keepExistingData?t:new File([],this.name),new x(this._db,this._id,t.size,t)}}function h(d){const e=d.transaction("entries","readwrite",{durability:"relaxed"});return[e,e.objectStore("entries")]}function g(d,e,t=!0){const{source:i,result:r}=d.target;for(const[s,n]of Object.values(e||r))n?i.delete(s):t?(i.get(s).onsuccess=g,i.delete(s)):i.get(s).onsuccess=o=>{Object.keys(o.target.result).length!==0?o.target.transaction.abort():i.delete(s)}}class f{constructor(e,t,i){this._db=e,this._id=t,this.kind="directory",this.name=i,this.readable=!0,this.writable=!0}async*entries(){const e=h(this._db)[1].get(this._id);await new Promise((i,r)=>{e.onsuccess=()=>i(),e.onerror=()=>r(e.error)});const t=e.result;if(!t)throw new DOMException(...w);for(const[i,[r,s]]of Object.entries(t))yield[i,s?new u(this._db,r,i):new f(this._db,r,i)]}isSameEntry(e){return this._id===e._id}getDirectoryHandle(e,t){return new Promise((i,r)=>{const s=h(this._db)[1],n=s.get(this._id);n.onsuccess=()=>{const o=n.result,a=o[e];a?a[1]?r(new DOMException(...b)):i(new f(this._db,a[0],e)):t.create?s.add({}).onsuccess=c=>{const l=c.target.result;o[e]=[l,!1],s.put(o,this._id).onsuccess=()=>i(new f(this._db,l,e))}:r(new DOMException(...w))}})}getFileHandle(e,t){return new Promise((i,r)=>{const s=h(this._db)[1],n=s.get(this._id);n.onsuccess=()=>{const o=n.result,a=o[e];if(a&&a[1]&&i(new u(this._db,a[0],e)),a&&!a[1]&&r(new DOMException(...b)),!a&&!t.create&&r(new DOMException(...w)),!a&&t.create){const c=s.put(new File([],e));c.onsuccess=()=>{const l=c.result;o[e]=[l,!0];const _=s.put(o,this._id);_.onsuccess=()=>{i(new u(this._db,l,e))}}}}})}async removeEntry(e,t){return new Promise((i,r)=>{const[s,n]=h(this._db),o=n.get(this._id);o.onsuccess=a=>{const c=o.result,l={_:c[e]};if(!l._)return r(new DOMException(...w));delete c[e],n.put(c,this._id),g(a,l,!!t.recursive)},s.oncomplete=i,s.onerror=r,s.onabort=()=>{r(new DOMException(...z))}})}}const E=(d={persistent:!1})=>new Promise(e=>{const t=indexedDB.open("fileSystem");t.onupgradeneeded=()=>{const i=t.result;i.createObjectStore("entries",{autoIncrement:!0}).transaction.oncomplete=r=>{i.transaction("entries","readwrite").objectStore("entries").add({})}},t.onsuccess=()=>{e(new f(t.result,1,""))}});export{E as default};
